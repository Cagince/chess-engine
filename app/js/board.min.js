var GameBoard, GeneratePosKey, PIECEINDEX;

PIECEINDEX = function(pce, pceNum) {
  return pce * 10 + pceNum;
};

GameBoard = {};

GameBoard.pieces = new Array(BOARD_SQUARE_NUMBER);

GameBoard.side = COLOURS.WHITE;

GameBoard.fiftyMove = 0;

GameBoard.playHistory = 0;

GameBoard.ply = 0;


/*
 * 0001 white king castling
 * 0010 white queen castling
 * 0100 black king castling
 * 1000 black queen castling
 * -----------------------------
 * 1101 = 13 <- white cannot castle queen side
 * Bitwise & to implement
 * .............................
 */

GameBoard.castlingPermission = 0;

GameBoard.enPasant = 0;

GameBoard.material = new Array(2);

GameBoard.pieceAmount = new Array(13);

GameBoard.pieceListArray = new Array(14 * 10);

GameBoard.positionKey = 0;

GeneratePosKey = function() {
  var finalKey, i, piece, ref, sq;
  piece = PIECES.EMPTY;
  finalKey = 0;
  for (sq = i = 0, ref = BOARD_SQUARE_NUMBER; 0 <= ref ? i <= ref : i >= ref; sq = 0 <= ref ? ++i : --i) {
    piece = GameBoard.pieces[sq];
    if (piece !== PIECES.EMPTY && piece !== SQUARES.OFFBOARD) {
      finalKey ^= PieceKeys[(piece * 120) + sq];
    }
  }
  if (GameBoard.side === COLOURS.WHITE) {
    finalkey ^= SideKey;
  }
  if (GameBoard.enPasant !== SQUARES.NO_SQ) {
    finalKey ^= PieceKeys[GameBoard.enPasant];
  }
  finalKey ^= CastleKeys[GameBoard.castlingPermission];
  return finalKey;
};
